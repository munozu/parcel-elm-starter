{"version":3,"sources":["registerServiceWorker.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","navigator","publicUrl","URL","origin","addEventListener","swUrl","registerValidSW","checkValidServiceWorker","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","fetch","response","status","headers","get","indexOf","ready","unregister","reload","Elm","Main","init","node","document","getElementById"],"mappings":"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","file":"src.e31bb0bc.js","sourceRoot":"../src","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import { Elm } from './Main.elm'\nimport registerServiceWorker from './registerServiceWorker';\n\nElm.Main.init({\n\tnode: document.getElementById(\"root\")\n});\n\nregisterServiceWorker();\n"]}